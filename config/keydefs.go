package config

const WildcardKey = 10000

var keyAliases = map[string]uint16{
	"_":                WildcardKey,
	"reserved":         0,
	"esc":              1,
	"k1":               2,
	"k2":               3,
	"k3":               4,
	"k4":               5,
	"k5":               6,
	"k6":               7,
	"k7":               8,
	"k8":               9,
	"k9":               10,
	"k0":               11,
	"minus":            12,
	"equal":            13,
	"backspace":        14,
	"tab":              15,
	"q":                16,
	"w":                17,
	"e":                18,
	"r":                19,
	"t":                20,
	"y":                21,
	"u":                22,
	"i":                23,
	"o":                24,
	"p":                25,
	"leftbrace":        26,
	"rightbrace":       27,
	"enter":            28,
	"leftctrl":         29,
	"a":                30,
	"s":                31,
	"d":                32,
	"f":                33,
	"g":                34,
	"h":                35,
	"j":                36,
	"k":                37,
	"l":                38,
	"semicolon":        39,
	"apostrophe":       40,
	"grave":            41,
	"leftshift":        42,
	"backslash":        43,
	"z":                44,
	"x":                45,
	"c":                46,
	"v":                47,
	"b":                48,
	"n":                49,
	"m":                50,
	"comma":            51,
	"dot":              52,
	"slash":            53,
	"rightshift":       54,
	"kpasterisk":       55,
	"leftalt":          56,
	"space":            57,
	"capslock":         58,
	"f1":               59,
	"f2":               60,
	"f3":               61,
	"f4":               62,
	"f5":               63,
	"f6":               64,
	"f7":               65,
	"f8":               66,
	"f9":               67,
	"f10":              68,
	"numlock":          69,
	"scrolllock":       70,
	"kp7":              71,
	"kp8":              72,
	"kp9":              73,
	"kpminus":          74,
	"kp4":              75,
	"kp5":              76,
	"kp6":              77,
	"kpplus":           78,
	"kp1":              79,
	"kp2":              80,
	"kp3":              81,
	"kp0":              82,
	"kpdot":            83,
	"zenkakuhankaku":   85,
	"102nd":            86,
	"f11":              87,
	"f12":              88,
	"ro":               89,
	"katakana":         90,
	"hiragana":         91,
	"henkan":           92,
	"katakanahiragana": 93,
	"muhenkan":         94,
	"kpjpcomma":        95,
	"kpenter":          96,
	"rightctrl":        97,
	"kpslash":          98,
	"sysrq":            99,
	"rightalt":         100,
	"linefeed":         101,
	"home":             102,
	"up":               103,
	"pageup":           104,
	"left":             105,
	"right":            106,
	"end":              107,
	"down":             108,
	"pagedown":         109,
	"insert":           110,
	"delete":           111,
	"macro":            112,
	"mute":             113,
	"volumedown":       114,
	"volumeup":         115,
	"power":            116,
	"kpequal":          117,
	"kpplusminus":      118,
	"pause":            119,
	"scale":            120,
	"kpcomma":          121,
	"hangeul":          122,
	"hanguel":          122,
	"hanja":            123,
	"yen":              124,
	"leftmeta":         125,
	"rightmeta":        126,
	"compose":          127,
	"stop":             128,
	"again":            129,
	"props":            130,
	"undo":             131,
	"front":            132,
	"copy":             133,
	"open":             134,
	"paste":            135,
	"find":             136,
	"cut":              137,
	"help":             138,
	"menu":             139,
	"calc":             140,
	"setup":            141,
	"sleep":            142,
	"wakeup":           143,
	"file":             144,
	"sendfile":         145,
	"deletefile":       146,
	"xfer":             147,
	"prog1":            148,
	"prog2":            149,
	"www":              150,
	"msdos":            151,
	"coffee":           152,
	"screenlock":       152,
	"rotate_display":   153,
	"direction":        153,
	"cyclewindows":     154,
	"mail":             155,
	"bookmarks":        156,
	"computer":         157,
	"back":             158,
	"forward":          159,
	"closecd":          160,
	"ejectcd":          161,
	"ejectclosecd":     162,
	"nextsong":         163,
	"playpause":        164,
	"previoussong":     165,
	"stopcd":           166,
	"record":           167,
	"rewind":           168,
	"phone":            169,
	"iso":              170,
	"config":           171,
	"homepage":         172,
	"refresh":          173,
	"exit":             174,
	"move":             175,
	"edit":             176,
	"scrollup":         177,
	"scrolldown":       178,
	"kpleftparen":      179,
	"kprightparen":     180,
	"new":              181,
	"redo":             182,
	"f13":              183,
	"f14":              184,
	"f15":              185,
	"f16":              186,
	"f17":              187,
	"f18":              188,
	"f19":              189,
	"f20":              190,
	"f21":              191,
	"f22":              192,
	"f23":              193,
	"f24":              194,
	"playcd":           200,
	"pausecd":          201,
	"prog3":            202,
	"prog4":            203,
	"dashboard":        204,
	"suspend":          205,
	"close":            206,
	"play":             207,
	"fastforward":      208,
	"bassboost":        209,
	"print":            210,
	"hp":               211,
	"camera":           212,
	"sound":            213,
	"question":         214,
	"email":            215,
	"chat":             216,
	"search":           217,
	"connect":          218,
	"finance":          219,
	"sport":            220,
	"shop":             221,
	"alterase":         222,
	"cancel":           223,
	"brightnessdown":   224,
	"brightnessup":     225,
}
var keyAliasesReversed = make(map[uint16]string)

type MouseButton string

const (
	ButtonLeft   MouseButton = "left"
	ButtonMiddle MouseButton = "middle"
	ButtonRight  MouseButton = "right"
)

func init() {
	// init keyAliasesReversed
	for alias, code := range keyAliases {
		keyAliasesReversed[code] = alias
	}
}

func GetKeyCode(alias string) (code uint16, exists bool) {
	code, exists = keyAliases[alias]
	return code, exists
}

func GetKeyAlias(code uint16) (alias string, exists bool) {
	alias, exists = keyAliasesReversed[code]
	return alias, exists
}
